version: '3.8'
services:
  # SQL Server
  sqlserver:
    build:
      context: .
      dockerfile: Server.API/Dockerfile-sqlserver
    container_name: sqlserver
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=StrongPassword123
      - MSSQL_PID=Developer
    cap_add:
      - SYS_PTRACE
    volumes:
      - sqlserver_data:/var/opt/mssql  # Use a named volume for persistence
      - ./sql-init:/docker-entrypoint-initdb.d
    command: >
      /bin/bash -c "
      /opt/mssql/bin/sqlservr & 
      sleep 30 && 
      echo 'Executing init.sql...' && 
      /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'StrongPassword123' -i /docker-entrypoint-initdb.d/init.sql &&
      wait"
    restart: on-failure
    networks:
      - cloud

  # sqlcmd
  # sqltools:
  #   image: mcr.microsoft.com/mssql-tools:latest
  #   depends_on:
  #     - sqlserver
  #   networks:
  #     - cloud

  # API Server
  server-api:
    container_name: server-api
    build:
      context: .
      dockerfile: Server.API/Dockerfile
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "8080:8080"
      - "8081:8081"
      - "587:587"   # Expose SMTP port
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=ProjectManagerPlatform;User Id=sa;Password=StrongPassword123;TrustServerCertificate=True
    depends_on:
      - sqlserver
    restart: on-failure
    networks:
      - cloud
    command: >
      sh -c "dotnet Server.API.dll"

networks:
  cloud:
    driver: bridge
volumes:
  sqlserver_data:
    driver: local


